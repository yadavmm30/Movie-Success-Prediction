So the primary goal by undertaking this project is to investigate the influential factors affecting the success or failure of a movie which could be game changing not only for the producers but also the audience. With all this in our mind we set out on a quest to answer this question: Whether is it possible to use machine learning algorithm to predict if movie will be a success (generate at least as much revenue as its budget) or a flop?



# Description of files
Our main data file is "Project_Code.py"
Our main source file for raw data was "movies_metadata.csv" (downloaded directly form Kaggle).
Four data set files were obtained from publicly available data on IMDb website namely name_basic.tsv, title_crew.tsv, title_ratings.tsv and title_year.tsv
GUI_df.csv was created for GUI part



**Dependant Variables(Features) -- y**
* New_Status column - 1 means Success & 0 means Failure

**Independant Variable -- X**
adult - whether the movie is adult rated or not(True or False).
belongs_to_collection - the collection to which the movie belongs to.
budget - The budget in which the movie was made.
genre - The genre of the movie, Action, Comedy ,Thriller etc.
homepage - A link to the homepage of the movie.
id - A unique identifier for each movie.
imdb_id - IMDB id of the movie.
keywords - The keywords or tags related to the movie.
original_language - The language in which the movie was made.
original_title - The title of the movie before translation or adaptation.
overview - A brief description of the movie.
popularity - A numeric quantity specifying the movie popularity.
poster_path - A link to the poster of the movie.
production_companies - The production house of the movie.
production_countries - The country in which it was produced.
release_date - The date on which it was released.
revenue - The worldwide revenue generated by the movie.
runtime - The running time of the movie in minutes.
spoken_languages - The languages that are spoken in the movie.
status - "Released" or "Rumored".
tagline - Movie's tagline.
title - Title of the movie.
vote_average - average ratings the movie received.
vote_count - the count of votes received.


**Machine Leaning algorithms**
Decision Tree (Entropy & Gini)
Support Vector Machine
Random Forest
Bagging (Hard Voting)
Adaptive Bootstrap
NB
KNN



The purpose of the application is to present a basic EDA analysis of the processed dataset and two dashboards with the results of the algoritms. The algorithms used are Random Forest Classifier and Decision Tree. These two models can be run separately but the complement each other since both gives information that is relevant for making recommendadtions.

The structure of the application is as follows

1. File
    >* **Exit :** it quits  the application

2. EDA Analysis
    >* **Initial Assesment :** This option presents a frequency histogram. It groups the number of countries by happiness score.
    >* **Happiness Final :** This option presents a dot plot that shows the relation of each feature in the final datasets with the happiness score. A line can be drawn optionally to represent the tendency of the data.
    >* **Correlation Plot :** This option presents a correlation plot for all the features in the dataset. The features can be add o deleted from the plot. Each time that a modification is made the button **Create Plot** should be pressed.

3. ML Models
    >* **Decision Tree Algorithm :**
    >>* This option creates a dashboard with all the results from the Decision Tree results given by the Sikit-learn library.
    >>* The features to be included in the algorithm are chosen. However, you can manipulate how many feature by manipulating the checkboxes in the screen.
    >>* The application also presents the percentage of the datasset used for training  and the maximum depth of the three. These parameters can be changed, as well.
    >>* Once you are comfortable with the chosen features and parameters you can click **Excute DT** to populate the dashboard with the data.
    >>* You can execute the algorithms as many times as you wish. The dashboard will erase the previous results and present the new ones.
    >>* To view the tree generated by the algorithm you will need to press the button **View Tree**. This button will open an additional window showing the pdf with the tree. This pdf is saved in the directory of your application with the name decision_tree_entropy.pdf


    >* **Random Forest Classifier :**


# Demo PyQt 5
The purpose of the application is to show graphics for an EDA Analysis, as well as the results of two machine learning algorithms based on the Kaggle & IMDb datasets.
